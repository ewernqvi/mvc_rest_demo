{"name":"Mvc rest demo","tagline":"A repo for an mvc rest demo held internally at Altran, the company where I work","body":"MVC REST Demo\r\n=============\r\n\r\n#Purpose\r\nThe purpose of this repository is to work as a RESTful backend for an MVC style architecture tutorial. \r\n\r\nThe purpose of the full application is to serve as a buy and sell site. A customer browse for \r\nadvertisements, if he/she finds one interesting he/she contacts the owner of the advertisement \r\nthrough the server.\r\nA user may also register, which gives the user the ability to add advertisements, edit and delete \r\nhis/her added advertisements.\r\n\r\nThe application consists of two parts. \r\n* [REST Server](#server)\r\n* [MVC Client](#client)\r\n\r\n# Server\r\nThe REST server part of the application has three resources\r\n\r\n1. Users\r\n2. Advertisements\r\n3. Images\r\n\r\nI will demonstrate typical flows using CURL, it is then up to the MVC client developer to use this \r\nfor input for the XHR-requests from the browser.\r\n\r\nPlease note that windows user need to install a git client with curl built-in, since curl is not \r\nnatively available in windows.\r\n\r\n## Installation\r\nTo get the server to run on your local system you must install some dependencies\r\n\r\n1. Node JS http://nodejs.org/, click on install\r\n\r\n   Once installed open a terminal to see if node is working\r\n\r\n   ```\r\nnode -version\r\n   ```\r\n\r\n   When you installed node you also get the node package manager called NPM which we will utlize to \r\n   get additional node dependencies\r\n\r\n2. Mongo DB http://docs.mongodb.org/manual/installation/, follow the instructions for your platform\r\n\r\n3. git http://git-scm.com/downloads, follow the instructions for your platform, note that windows \r\n   users shall use a version where curl also is included \r\n   [windows installation with curl included](https://msysgit.googlecode.com/files/Git-1.8.5.2-preview20131230.exe)\r\n\r\n4. Get the code\r\n   ```\r\ngit clone https://github.com/ewernqvi/mvc_rest_demo.git\r\n   ```\r\n5. Install dependencies\r\n   Change direcectory to the server of your downloaded \r\n   ```\r\ncd mvc_rest_demo/server\r\nnpm install -g mocha\r\nnpm install\r\n   ```\r\n\r\n6. Start mongo db in a separate terminal window\r\n   ```\r\n   mongod\r\n   ```\r\n7. Start the server\r\n   ```\r\n   node express_server\r\n   ```\r\n\r\n8. Run the test to see if everything is working, this must be done in a separate terminal window\r\n   ```\r\n   mocha\r\n   ```\r\n9. You are done\r\n\r\n## Typical Flows\r\n### User Registration\r\n```\r\ncurl -X POST -d '{\"email\" : \"mrx@gmail.com\", \"password\" : \"loko\"}' \\ \r\n  -H \"Content-Type: application/json\" http://localhost:3000/api/users\r\n```\r\nIf successful, this will return a new user in JSON format, note that depending on where and how you \r\ninstalled your server the URL may differ\r\n\r\n### User Logon\r\nOnce you have a user in the system, you can use this user to login, which is a requirement for \r\nadding new advertisements.\r\n```\r\ncurl -X GET -u 'mrx@gmail.com:loko' http://localhost:3000/api/users/mrx@gmail.com\r\n```\r\nNote that the password and username is what you supplied during user registration, we use basic \r\nauthentication. In a real-world application this resource should be protected by https since we \r\nsend the password over the wire in base64 encoding. \r\n\r\nIf we manage to login we get the following JSON back\r\n```javascript\r\n{\r\n  email: \"mrx@gmail.com\",\r\n  password: \"loko\",\r\n  _id: \"mrx@gmail.com\",\r\n  created: \"2014-01-31T08:24:11.066Z\",\r\n  userToken: \"ovxptw7z8rveipb9eqc04tjsoky5jyvi\"\r\n}\r\n```\r\nThe important bit, which we must utilize later is the userToken, which we will stick to our \r\nhttp-header to identify ourselves. You may wonder why the server doesn't make this stick by putting \r\nit in a cookie, the easy answer is because it isn't restful and since this training is about REST \r\nwe shall apply the stateless nature of the server.\r\n\r\nFor now remember your token\r\n\r\n### Add a new advertisement\r\nTo add a new advertisement, we issue a post, now we need to supply the userToken in the HTTP header \r\nfor our identification\r\n\r\n```\r\ncurl -X POST -H user-token:ovxptw7z8rveipb9eqc04tjsoky5jyvi -H \"Content-Type:application/json\" \\\r\n  -d '{\"category\": \"Phone\", \"description\": \"iPhone 5 - Mint Condition\", \"price\": \"$200\"}' \\ \r\n  http://localhost:3000/api/advertisments\r\n```\r\nIf successful we get the following JSON back, the important bit is the created _id which we will \r\nuse later on\r\n```javascript\r\n[\r\n  {\r\n    category: \"Phone\",\r\n    description: \"iPhone 5 - Mint Condition\",\r\n    price: \"$200\",\r\n    owner: \"mrx@gmail.com\",\r\n    created: \"2014-01-31T09:27:34.825Z\",\r\n    _id: \"52eb6c860e5f433f24000003\"\r\n  }\r\n]\r\n```\r\n\r\n### Add an image to our advertisement\r\nTo make our advertisement more appealing we want to upload an image to the server. Image uploading \r\ncan be performed in many ways, but when using a http-browser \r\n[multi-part form](http://www.ietf.org/rfc/rfc2388.txt) is the norm and the browser handles \r\ncontent-type, size headers etc for you.\r\n\r\nWhen using curl we must include the -F option to tell curl we want to post a file, in this case our \r\nimage. Since we want to add the image to our advertisement we must also include the advertisement Id \r\nas a form parameter\r\n\r\n```\r\ncurl -F \"file=@./iphone.gif\" -F \"advertismentId=52eb6c860e5f433f24000003\" http://localhost:3000/api/images\r\n```\r\nWe get back a JSON from the server indicating that our file was successfully updated, the important\r\nbit in this JSON is the href to the server generated name of the image\r\n\r\n```javascript\r\n{\r\n    contentType: \"image/gif\",\r\n    orgName: \"iphone.gif\",\r\n    imageId: \"9279-1vopx7g.gif\",\r\n    advertismentId: \"52eb6c860e5f433f24000003\",\r\n    href: \"/img/9279-1vopx7g.gif\"\r\n}\r\n```\r\nWe can add multiple images to our advertisement, if we ask the server for the advertisement now\r\n\r\n```\r\ncurl http://localhost:3000/api/advertisments/52eb6c860e5f433f24000003\r\n```\r\nWe see that the server has updated the advertisement with a link to the added picture\r\n\r\n```javascript\r\n{\r\n  _id: \"52eb6c860e5f433f24000003\",\r\n  category: \"Phone\",\r\n  created: \"2014-01-31T09:27:34.825Z\",\r\n  description: \"iPhone 5 - Mint Condition\",\r\n  images: [\r\n    {\r\n      contentType: \"image/gif\",\r\n      orgName: \"iphone.gif\",\r\n      imageId: \"9279-1vopx7g.gif\",\r\n      advertismentId: \"52eb6c860e5f433f24000003\",\r\n      href: \"/img/9279-1vopx7g.gif\"\r\n    }\r\n  ],\r\n  owner: \"mrx@gmail.com\",\r\n  price: \"$200\"\r\n}\r\n\r\n```\r\n\r\n### Browse advertisements in the system\r\nNow we have added an advertisement so we can browse it in the system, we will start by not supplying \r\na user-token, e.g. act as a new user who just wants to buy something, this can easily be achieved \r\nwith a normal web browser, just click on the link or modify it if you run your server on a different \r\nlocation\r\n\r\n[http://localhost:3000/api/advertisments](http://localhost:3000/api/advertisments)\r\n\r\nYou will see the JSON formatted as text in the browser window, at least if you run in google Chrome\r\n\r\nBut there is more, if you supply a user-token in the header, we go back to curl to do this, we now \r\nget back links, which are shortcuts for edit, delete and details actions of the resource. These \r\nlinks are typically utilized by a dynamic client, in rest terms we call this \r\n[HATEOAS](http://en.wikipedia.org/wiki/HATEOAS), which stand for **Hypermedia as the Engine of \r\nApplication State**. From a REST API perspective this is important, since the linked parts of the \r\nAPI can be considered private, and changes to these parts of the API can be made without having to \r\ninform users of the API, that is if they utilized the provided links in their clients and not \r\nhardcoding paths.\r\n\r\n```\r\ncurl http://localhost:3000/api/advertisments -H user-token:ovxptw7z8rveipb9eqc04tjsoky5jyvi\r\n```\r\n\r\nJSON output with links\r\n```javascript\r\n[\r\n{\r\n    _id: \"52eb6c860e5f433f24000003\",\r\n    category: \"Phone\",\r\n    created: \"2014-01-31T09:27:34.825Z\",\r\n    description: \"iPhone 5 - Mint Condition\",\r\n    images: [\r\n      {\r\n        contentType: \"image/gif\",\r\n        orgName: \"iphone.gif\",\r\n        imageId: \"9279-1vopx7g.gif\",\r\n        advertismentId: \"52eb6c860e5f433f24000003\",\r\n        href: \"/img/9279-1vopx7g.gif\"\r\n      }\r\n    ],\r\n    owner: \"mrx@gmail.com\",\r\n    price: \"$200\",\r\n    update: {\r\n      verb: \"PUT\",\r\n      description: \"Update for resource advertisements with id 52eb6c860e5f433f24000003\",\r\n      href: \"/api/advertisments/52eb6c860e5f433f24000003\"\r\n    },\r\n    remove: {\r\n      verb: \"DELETE\",\r\n      href: \"/api/advertisments/52eb6c860e5f433f24000003\",\r\n      description: \"Delete for resource advertisement with id 52eb6c860e5f433f24000003\"\r\n    },\r\n    details: {\r\n      verb: \"GET\",\r\n      description: \"Details for resource advertisements with id 52eb6c860e5f433f24000003\",\r\n      href: \"/api/advertisments/52eb6c860e5f433f24000003\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nWe get back a list of advertisements, since we have only created one, the list only contains one \r\nadvertisement. Let's create another advertisement in the system to make it a bit more interesting, \r\nfor simplicity we will add another phone\r\n\r\n```\r\ncurl -X POST -H user-token:ovxptw7z8rveipb9eqc04tjsoky5jyvi -H \"Content-Type:application/json\" \\\r\n  -d '{\"category\": \"Phone\", \"description\": \"Samsung S3 -  Perfect Condition\", \"price\": \"$200\"}' \\\r\n  http://localhost:3000/api/advertisments\r\n```\r\n\r\nWhen we look for advertisements now, [http://localhost:3000/api/advertisments](http://localhost:3000/api/advertisments) \r\nwe get two phone backs, but the API also let's us provide a query, so lets say we only want to \r\nsearch for phones with Samsung in the description we would add the following query parameters to \r\nour query\r\n\r\n[http://localhost:3000/api/advertisments?category=Phone&description=Samsung](http://localhost:3000/api/advertisments?category=Phone&description=Samsung)\r\n\r\nWe will only get back the Samsung Phone\r\n\r\n## Additional Resource Methods\r\n### Users\r\n1. Delete User\r\n   ```\r\ncurl -X DELETE -H user-token:_token_ http://localhost:3000/api/users/:id\r\n   ```\r\n   Set the _token_ and the :id to whatever you want to delete\r\n\r\n   Deleting a user also recursively removes all the advertisements added by the user\r\n\r\n2. Update User\r\n   ```\r\ncurl -X PUT -d '{\"email\": \"email@somewhere.com\", \"password\":\"newPwd\"}' \\\r\n  -H Content-Type:application/json -H user-token:_token_ http://localhost:3000/api/users/:id \r\n   ```\r\n   Set the _token_ and the :id of the user you want to update, note that you may only update yourself \r\n   unless you have the administer role. The content passed is a JSON record all the fields of the user. \r\n   Please note that a HTTP PUT overwrites the entire record, so all fields must be supplied in the \r\n   passed record, even the ones you don't change.\r\n\r\n### Images\r\n1. Delete an Image\r\n\r\n   ```\r\ncurl -X DELETE -H user-token:_token_ http://localhost:3000/api/image/:id\r\n   ```\r\n\r\n   Set the _token_ and the :id to the image you want to delete, deleting an image also removes the \r\n   link to the the image from the advertisement.\r\n\r\n###  Advertisements\r\n1. Update an advertisement text\r\n\r\n   ```\r\ncurl - X PUT -d '{\"price\": \"200\", \"category\":\"Phone\", \"description\": \"Brand new Ericsson Phone\"}' \\\r\n   -H Content-Type:application/json -H user-token:_token_ http://localhost:3000/api/advertisments/:id\r\n   ```\r\n\r\n   Set the _token_ and the :id of the advertisement you want to update, note that the JSON record \r\n   shall be complete in a put\r\n2. Delete an advertisement\r\n\r\n   ```\r\ncurl -X DELETE -H user-token:_token_ http://localhost:3000/api/advertisments/:id\r\n   ```\r\n\r\n   Set the _token_ and the :id of the advertisement you want to delete\r\n\r\n# Client\r\nThis section will cover the actual tutorial of creating a rest client using the \r\n[AngularJS](http://www.angularjs.org) framework\r\n\r\n## A Static Client\r\nTo get an idea what we try to accomplish we start out with a mockup, a static HTML client of our demo. \r\nIt will be much easier to reason what we want to build if we have seen a prototype.\r\n\r\n[static site](http://htmlpreview.github.io/?https://github.com/ewernqvi/mvc_rest_demo/blob/master/server/public/static_site.html)\r\n\r\nIn the static client we see that we have a rather simple application to display advertisements, \r\nit shall also be possible to login and register, once logged in it shall be possible to add new \r\nadvertisements, and edit and delete these. \r\nWe will convert the application to a dynamic Angular JS application step by step, but before we do \r\nthis just a short intro to the Angular JS framework\r\n\r\n## Background on Angular JS\r\nThe [Angular JS](http://angularjs.org) was created internally within Google in 2009, an engineer \r\nnamed Miško Hevery, he claimed that he could re-write 17 000 lines of front-end code into pure js \r\nwithin two weeks. He almost made the timeline but the amazing effect was that the application now \r\nwas down to 1500 lines of code, they then knew that they where on to something.\r\n\r\nSince 2009 the Angular JS framework has been stabilized and is used within several thousand web-sites \r\naround the world.\r\n\r\n### What is Angular\r\nAngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template \r\nlanguage and lets you extend HTML's syntax to express your application's components clearly and \r\nsuccinctly. Out of the box, it eliminates much of the code you currently write through data binding \r\nand dependency injection. And it all happens in JavaScript within the browser, making it an ideal \r\npartner with any server-side technology.\r\n\r\nAngular is what HTML would have been had it been designed for applications. \r\n\r\nThe mismatch between dynamic applications and static documents is often solved with:\r\n\r\n* A library - Your code is in charge and it calls into the library when it sees fit to assist in altering \r\n  the dom. E.g., jQuery.\r\n* Frameworks - a particular implementation of a web application, where your code fills in the details. \r\n  The framework is in charge and it calls into your code when it needs something application specific. \r\n  E.g., knockout, ember, etc.\r\n\r\nAngular takes another approach. It attempts to minimize the impedance mismatch between document \r\ncentric HTML and what an application needs by creating new HTML constructs. Angular teaches the \r\nbrowser new syntax through a construct called [directives](http://docs.angularjs.org/guide/directive). \r\n\r\nAngular comes with the following out-of-the-box to assist you with creating an MVC style application\r\n* [data-binding](http://docs.angularjs.org/guide/databinding)\r\n* [basic templating directives](http://docs.angularjs.org/guide/templates)\r\n* [form validation](http://www.ng-newsletter.com/posts/validations.html)\r\n* [routing and deep-linking](http://docs.angularjs.org/api/ngRoute.directive:ngView)\r\n* [dependency injection](http://docs.angularjs.org/guide/di)\r\n\r\nTestability\r\n* [unit-testing](http://docs.angularjs.org/guide/dev_guide.unit-testing)\r\n* [end-to-end testing](http://docs.angularjs.org/guide/dev_guide.e2e-testing)\r\n* [mocks](http://docs.angularjs.org/api/ngMock)\r\n* [Karma test harnesses](http://karma-runner.github.io/0.10/index.html)\r\n\r\n###The Zen of Angular\r\nAngular is built around the belief that declarative code is better than imperative when it comes to \r\nbuilding UIs and wiring software components together, while imperative code is excellent for \r\nexpressing business logic.\r\n\r\n* It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves \r\n  the testability of the code.\r\n* It is a really, really good idea to regard app testing as equal in importance to app writing. \r\n  Testing difficulty is dramatically affected by the way the code is structured.\r\n* It is an excellent idea to decouple the client side of an app from the server side. This allows \r\n  development work to progress in parallel, and allows for reuse of both sides.\r\n* It is very helpful indeed if the framework guides developers through the entire journey of building an app: \r\n  * from designing the UI\r\n  * through writing the business logic\r\n  * to testing.\r\n* It is always good to make common tasks trivial and difficult tasks possible.\r\n\r\n###Angular frees you from the following pains\r\n\r\n* Registering callbacks\r\n* Manipulating HTML DOM programmatically\r\n* Marshaling data to and from the UI- Data Binding\r\n* Writing tons of initialization code just to get started\r\n\r\nfor further information please see \r\n* [Angular JS Introduction](http://docs.angularjs.org/guide/introduction)\r\n* [Angular JS API](http://docs.angularjs.org/api)\r\n* [Ten Top Reasons Why to use Angular JS](http://www.sitepoint.com/10-reasons-use-angularjs/)\r\n\r\n## Developing the Angular JS Client\r\nNow that we have a very brief understanding what Angular JS is all about it's time to see it in \r\naction. Angular comes with a starter template, I have prepared this template for our demo application. \r\nWe will utilize git to fetch the latest version of our code\r\n\r\n```\r\ngit checkout -f client-angular1\r\n```\r\n\r\nOnce checked out we need to install bower, which is a dependency manager for javascript\r\n```\r\ncd $APP_HOME/server/public\r\nnpm install -g bower\r\n```\r\nWhere APP_HOME is the root of the application, e.g. the mvc_rest_demo directory. We will now let bower fetch our application dependencies\r\n````\r\nbower install\r\n```\r\n\r\nWe know get a new set of files, but most importantly a working skeleton application that is fully \r\ntestable and prepared for the tasks to come.\r\n\r\nIf your node server is not running start it with\r\n```\r\nnode express_server.js\r\n```\r\n\r\nOnce the server has been started it shall be possible to navigate to\r\n\r\n[app/index.html](http://localhost:3000/app/index.html)\r\n\r\nAnd you shall see our Angular JS skeleton app with the text Angular JS is working 4-ever at the button. \r\nIf you view the code of [index.html](https://github.com/ewernqvi/mvc_rest_demo/blob/client-angular1/server/public/app/index.html) \r\nwe can see that angular js libraries are loaded and the {{2+2}} at the button is evaluated to a 4 \r\nwhich indicates that it's up and running.\r\n\r\nTo run the [test](https://github.com/ewernqvi/mvc_rest_demo/blob/client-angular1/server/public/run-tests.md) \r\nplease follow the linked [instructions](https://github.com/ewernqvi/mvc_rest_demo/blob/client-angular1/server/public/run-tests.md).\r\n\r\n### Migrating our Static Client to Angular JS - Model and Controller\r\nNow when we have been introduced to the starter application, it's time to get useful and migrate our \r\nstatic application to a dynamic angular application. We leave the rest parts behind for now, but \r\ncreate a local mockup repository of our initial data. To do this we first take a look at the JSON \r\nformat returned by our REST-server\r\n\r\n```javascript\r\n{\r\n  _id: \"52eb6c860e5f433f24000003\",\r\n  category: \"Phone\",\r\n  created: \"2014-01-31T09:27:34.825Z\",\r\n  description: \"i Phone5 - Mint Condition\",\r\n  images: [\r\n    {\r\n      contentType: \"image/gif\",\r\n      orgName: \"iphone.gif\",\r\n      imageId: \"9279-1vopx7g.gif\",\r\n      advertismentId: \"52eb6c860e5f433f24000003\",\r\n      href: \"/img/9279-1vopx7g.gif\"\r\n    }\r\n  ],\r\n  owner: \"mrx@gmail.com\",\r\n  price: \"$200\"\r\n}\r\n\r\n```\r\n\r\nif we take this as template input, and the data from our \r\n[static page](https://github.com/ewernqvi/mvc_rest_demo/blob/master/server/public/static_site.html) \r\nwe could convert the 3 advertisements on the static page to the following JSON\r\n\r\n```javascript\r\n[\r\n {\r\n  _id: \"dummy-client-id1\",\r\n  category: \"Hobbies\",\r\n  created: \"2014-02-14T09:27:34.825Z\",\r\n  description: \"Premium Surf Board\",\r\n  images: [\r\n    {\r\n      contentType: \"image/jpg\",\r\n      advertismentId: \"dummy-client-id1\",\r\n      href: \"/test-data/img/surfboard.jpg\"\r\n    }\r\n  ],\r\n  owner: \"mrx@gmail.com\",\r\n  price: \"$110\"\r\n },\r\n {\r\n  _id: \"dummy-client-id2\",\r\n  category: \"Hobbies\",\r\n  created: \"2014-02-14T09:27:34.825Z\",\r\n  description: \"Premium Long Board\",\r\n  images: [\r\n    {\r\n      contentType: \"image/jpg\",\r\n      advertismentId: \"dummy-client-idr2\",\r\n      href: \"/test-data/img/longboard.jpg\"\r\n    }\r\n  ],\r\n  owner: \"mrx@gmail.com\",\r\n  price: \"$110\"\r\n },\r\n {\r\n  _id: \"dummy-client-id3\",\r\n  category: \"Hobbies\",\r\n  created: \"2014-02-14T09:27:34.825Z\",\r\n  description: \"Dr Zoggs Sex Wax\",\r\n  images: [\r\n    {\r\n      contentType: \"image/jpg\",\r\n      advertismentId: \"dummy-client-id3\",\r\n      href: \"/test-data/img/zoggs.jpg\"\r\n    }\r\n  ],\r\n  owner: \"mrx@gmail.com\",\r\n  price: \"$11\"\r\n }\r\n]\r\n\r\n```\r\nLet us create a new partial for our list of advertisements, the HTML code for this would be\r\n\r\n```HTML\r\n<h2>This is where our list of advertisements shall be displayed</h2>\r\n```\r\nadvertisments.html\r\n\r\nlet us save the file as partials/advertisments.html\r\n\r\nNow we must modify the router so it will be aware of our partial\r\n```javascript\r\n  $routeProvider.when('/view1', {templateUrl: 'partials/partial1.html', controller: 'MyCtrl1'});\r\n  $routeProvider.when('/view2', {templateUrl: 'partials/partial2.html', controller: 'MyCtrl2'});\r\n  $routeProvider.when('/advertisments', {templateUrl: 'partials/advertisments.html', \r\n      controller: 'AdvertismentsCtrl'});\r\n  // Default route\r\n  $routeProvider.otherwise({redirectTo: '/advertisments'});\r\n```\r\n[app.js](https://github.com/ewernqvi/mvc_rest_demo/blob/client-angular1/server/public/app/js/app.js)\r\n\r\nAs you probably spotted, we reference a new controller called advertismentsCtrl, lets open up the \r\ncontrollers.js file and add our controller\r\n\r\n```javascript\r\nangular.module('buyAndSellApp.controllers', []).\r\n  controller('AdvertismentsCtrl', [function() {\r\n    // We leave this blank for now\r\n  }])\r\n  .controller('MyCtrl1', [function() {\r\n\r\n  }])\r\n  .controller('MyCtrl2', [function() {\r\n\r\n  }]);\r\n```\r\n[controllers.js](https://github.com/ewernqvi/mvc_rest_demo/blob/client-angular1/server/public/app/js/controllers.js)\r\n\r\nWe deliberately added no code in the controller, since we are test-driven we shall now modify our \r\ntest to include the new controller and in the test we shall state the wanted behavior of our \r\ncontroller, so open up controllersSpec.js to add our new test\r\n\r\n```javascript\r\ndescribe('controllers', function(){\r\n  beforeEach(module('buyAndSellApp.controllers'));\r\n\r\n  it('should create advertisement model with 3 advertisements', inject(function($controller) {\r\n    var scope = {},\r\n        ctrl = $controller('AdvertismentsCtrl', {$scope:scope});\r\n    //Check that the controller has a list of three advertisements\r\n    expect(scope.advertisments.length).toBe(3);\r\n  }));\r\n\r\n  it('should ....', inject(function() {\r\n    //spec body\r\n  }));\r\n});\r\n```\r\n[controllersSpec.js](https://github.com/ewernqvi/mvc_rest_demo/blob/client-angular1/server/public/test/unit/controllersSpec.js)\r\n\r\nRun the unit tests, if it was not started already.\r\n\r\nEnsure that the test fails, we have not fixed our controller yet remember!\r\n\r\nOK, lets fix the controller\r\n```javascript\r\nangular.module('buyAndSellApp.controllers', []).\r\n  controller('AdvertismentsCtrl', ['$scope', function($scope) {\r\n  $scope.advertisments= [\r\n   {\r\n     _id: \"dummy-client-id1\",\r\n     category: \"Hobbies\",\r\n     created: \"2014-02-14T09:27:34.825Z\",\r\n     description: \"Premium Surf Board\",\r\n     images: [\r\n      {\r\n        contentType: \"image/jpg\",\r\n        advertismentId: \"dummy-client-id1\",\r\n        href: \"https://raw.github.com/ewernqvi/mvc_rest_demo/master/server/test-data/img/surfboard.jpg\"\r\n      }\r\n     ],\r\n    owner: \"mrx@gmail.com\",\r\n    price: \"$110\"\r\n   },\r\n   {\r\n    _id: \"dummy-client-id2\",\r\n    category: \"Hobbies\",\r\n    created: \"2014-02-14T09:27:34.825Z\",\r\n    description: \"Premium Long Board\",\r\n    images: [\r\n      {\r\n        contentType: \"image/jpg\",\r\n        advertismentId: \"dummy-client-idr2\",\r\n        href: \"https://raw.github.com/ewernqvi/mvc_rest_demo/master/server/test-data/img/longboard.jpg\"\r\n      }\r\n    ],\r\n    owner: \"mrx@gmail.com\",\r\n    price: \"$110\"\r\n   },\r\n   {\r\n    _id: \"dummy-client-id3\",\r\n    category: \"Hobbies\",\r\n    created: \"2014-02-14T09:27:34.825Z\",\r\n    description: \"Dr Zoggs Sex Wax\",\r\n    images: [\r\n      {\r\n        contentType: \"image/jpg\",\r\n        advertismentId: \"dummy-client-id3\",\r\n        href: \"https://raw.github.com/ewernqvi/mvc_rest_demo/master/server/test-data/img/zoggs.jpg\"\r\n      }\r\n    ],\r\n    owner: \"mrx@gmail.com\",\r\n    price: \"$11\"\r\n   }\r\n  ];\r\n\r\n  }])\r\n```\r\nNote that we use an array to define the function body, this is to ensure that the code can be \r\nminified with the angular dependency injection still working, \r\nsee also [angular minification](http://docs.angularjs.org/guide/di)\r\n\r\nRerun our tests, it shall pass now, if it doesn't check your code.\r\n\r\n### Adding our Presentation Logic\r\nBefore we add the presentation logic, I will try to explain what actually happens within our \r\nAngular application, this is probably best done with a picture.\r\n\r\n![alt Angular Image](https://raw.github.com/ewernqvi/mvc_rest_demo/master/pres/angular-overview.png)\r\n\r\nAngular applications consist of a Model View and Controller architecture, but what actually happens \r\nin our application is that in index.html the ng-app directive is loaded which basically tells Angular \r\nto take control.\r\n\r\nWithin our application, which is a Single Page Application, we have the ability to present partials \r\nwithin the page, these will be swapped in and out depending on our actions.\r\n\r\nIn our first example we load the partial advertisments.html which will contain a div with a \r\ncontroller, which is responsible for the scope. In our case we loop over the advertisements array \r\nwith a [ng-repeat](http://docs.angularjs.org/api/ng.directive:ngRepeat) directive. This let us create \r\nrows in our table.The image has a special [ng-src](http://docs.angularjs.org/api/ng.directive:ngSrc) \r\ndirective since we want data binding later on, e.g. if we switch images it should be automatically \r\nreflected in the view through Angular's two-way data binding.\r\n\r\nBefore we dive into our presentation logic a small refactoring of our application is needed, \r\nremember that we put an array of test-data directly into our controller, this is poor design so we \r\nwill introduce a new angular feature called a \r\n[service](http://docs.angularjs.org/guide/dev_guide.services.understanding_services) where we will \r\nplace this logic.\r\n\r\n#### Angular JS Service\r\nIf you managed to get the code working in the previous section, you can continue with that code-base\r\nif not you can check out a working version from the previous section\r\n\r\n```\r\ngit checkout -f client-angular2\r\n```\r\n\r\nWe start out by modifying our test and then implement a simple stub for our servicer. \r\n\r\n```javascript\r\n  // add the following test\r\n  describe('advertisment', function() {\r\n    it('should return the advertisment service', inject(function(advertisment) {\r\n      expect(advertisment.list().length).toEqual(3);\r\n    }));\r\n  });\r\n```\r\ntest/unit/servicesSpec.js\r\n\r\nThen we must inform Angular DI that we have a new service available for the application\r\n\r\n```javascript\r\n// Demonstrate how to register services\r\n// In this case it is a simple value service.\r\nangular.module('buyAndSellApp.services', []).\r\n  value('version', '0.1')\r\n  .value('advertisment', new advertisment());\r\n\r\nfunction advertisment(){\r\n  return{\r\n    list: function(){\r\n            return [];\r\n          }\r\n  }\r\n}\r\n```\r\napp/js/services.js\r\n\r\nRunning the test now shall result in a failure, since we haven't moved the array contents yet.\r\n\r\nNow modify our AdvertimentCtrl to call the service, move the array to our advertisement service.\r\n\r\n```javascript\r\nvar buyAndSellApp = angular.module('buyAndSellApp.controllers', []);\r\n // To ensure that minification works we must declare injection\r\n // in an array like manner, get use to it to avoid minification bugs\r\n buyAndSellApp.controller('AdvertismentsCtrl',['$scope', 'advertisment',\r\n                                               function($scope, advertisment) {\r\n        $scope.advertisments = advertisment.list();\r\n  }]);\r\n\r\n  buyAndSellApp.controller('MyCtrl1', [function() {\r\n\r\n  }])\r\n  buyAndSellApp.controller('MyCtrl2', [function() {\r\n\r\n  }]);\r\n```\r\napp/js/controllers.js\r\n\r\nNote that we added our service as an injection parameter, then we simply delegate to the service to\r\nset our scope variable. Did you remember to move the array into the service?\r\n\r\nrun the test if it's not started, it shall pass now\r\n\r\n```\r\nkarma start config/karma.conf.js --single-run\r\n```\r\n\r\n#### Partial HTML Code -- Advertisements\r\nNow lets edit our partial and add the following html-code\r\n\r\n```HTML\r\n<div class=\"container\">\r\n  <table class=\"table\">\r\n    <tbody>\r\n      <!-- dyn content begin -->\r\n      <tr ng-repeat=\"ad in advertisments\">\r\n         <td>\r\n            <a href=\"#/advertisment/{{ad._id}}\"><img ng-src=\"{{ad.images[0].href}}\" class=\"img-thumbnail\"></a>\r\n         </td>\r\n         <td>\r\n            <div>{{formatDate(ad.created)}}</div>\r\n            <div><a href=\"#/advertisment/{{ad._id}}\"><h2>{{ad.description}}</h2></a></div>\r\n            <div><h3>{{ad.price}}</h3></div>\r\n         </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div> <!-- /container -->\r\n```\r\n\r\nAs you may see we create links to render details in a separate view, we will implement this later,\r\nfor now the links will not work. We also added reference to a function\r\n\r\n#### Advertisment Details\r\n\r\nCreate a new advertismentDetails partial\r\n\r\n```HTML\r\n<div class=\"container\">\r\n  <hr>\r\n  <h1>{{advertisment.description}}</h1>\r\n  sold by {{advertisment.owner}}\r\n  <div class=\"large-image\" ><img ng-src=\"{{currentImage.href}}\" style=\"max-height: 600px\" ></div>\r\n  <div style=\"background: grey;\">TODO: Thumbnails goes here if several images</div>\r\n  <h2>Price: {{advertisment.price}}</h2>\r\n\r\n  <div>{{advertisment.longDescription}}</div>\r\n</div>\r\n```\r\npartials/advertismentDetails.html\r\n\r\nNothing fancy here, just a simple HTML page displaying all the images for the advertisement and the\r\ndetailed description of the advertisement. We have left the small Thumbnails, if we have several picture as an exercise for you. The simplest way to accomplish this is probably to perform an ng-repeat over the image array and add an [ng-click](http://docs.angularjs.org/api/ng.directive:ngClick) handler for each thumbnail which calls the scope and sets $scope.currentImage, which will change the image.\r\n\r\n```javascript\r\n'use strict';\r\n\r\n// Declare app level module which depends on filters, and services\r\nangular.module('buyAndSellApp', [\r\n  'ngRoute',\r\n  'buyAndSellApp.filters',\r\n  'buyAndSellApp.services',\r\n  'buyAndSellApp.directives',\r\n  'buyAndSellApp.controllers'\r\n]).\r\nconfig(['$routeProvider', function($routeProvider) {\r\n  $routeProvider.when('/view1', {templateUrl: 'partials/partial1.html', controller: 'MyCtrl1'});\r\n  $routeProvider.when('/view2', {templateUrl: 'partials/partial2.html', controller: 'MyCtrl2'});\r\n  $routeProvider.when('/advertisment/:id', {templateUrl: 'partials/advertismentDetails.html',\r\n      controller: 'AdvertismentDetailCtrl'});\r\n  $routeProvider.when('/advertisments', {templateUrl: 'partials/advertisments.html', \r\n      controller: 'AdvertismentsCtrl'});\r\n  // Default route\r\n\r\n  $routeProvider.otherwise({redirectTo: '/advertisments'});\r\n}]);\r\n```\r\njs/app.js\r\n\r\nHere we just add the routing logic, the route is triggered by in the adverisments.html partial, which\r\nwe have already completed. The new route refers to a new controller which we must implement.\r\n\r\n```javascript\r\nTODO: insert js code\r\n```\r\ntest/unit/controllersSpec.js\r\n\r\nOur new advertismentDetail controller test, at this stage the test will fail, since we have not \r\ncreated the controller yet.\r\n\r\n```javascript\r\n buyAndSellApp.controller('AdvertismentDetailCtrl',['$scope', '$routeParams', 'advertisment',\r\n                                               function($scope, $routeParams, advertisment) {\r\n        $scope.adId = $routeParams.id;\r\n                $scope.adId = $routeParams.id;\r\n        $scope.advertisment = {};\r\n        // Note that we utilize a promise here, since this will be asyncronous when we later\r\n        // will communicate with the server\r\n        advertisment.get($scope.adId).then(function(res){\r\n           $scope.advertisment = res;\r\n           $scope.currentImage = res.images[0];\r\n        }, function(err){console.log('error: '+ err)});\r\n        \r\n        $scope.formatDate = formatDate;\r\n  }]); \r\n```\r\njs/controllers.js\r\n\r\nWhen adding the controller logic, we realize that we need a new method in our advertisement service \r\nto communicate with the advertisement on the server-side. Since we at this instance do not\r\nhave more details when getting a single resource, we simply pick out the correct resource from the\r\nexisting list method. We also introduced a new concept called promises or futures in java. \r\n\r\nIn an asynchronous word promises are as important as try and catch in the synchronous world. The promise let us manage dependencies between shared resources in a nice way, I found the following [blog post](http://andyshora.com/promises-angularjs-explained-as-cartoon.html) about promises really good, please have a look.\r\n\r\nIn Angular a stripped variant of the Q library is used, is is called [$q](http://docs.angularjs.org/api/ng.$q) and should be injected as a dependency.\r\n\r\n```javascript\r\n// inject service dependencies, while we are at it we inject the $http service\r\nangular.module('buyAndSellApp.services', [], function($provide) {\r\n  $provide.factory('version', [ function() {\r\n    return '0.1';\r\n  }]);\r\n  $provide.factory('advertisment', ['$http', '$q', function(httpSvc, q){return new advertisment(httpSvc, q);}]);  \r\n\r\nfunction advertisment($http, $q){\r\n  function list(){\r\n        return [\r\n                {\r\n                _id: \"dummy-client-id1\",\r\n                category: \"Hobbies\",\r\n                created: \"2014-02-04T09:27:34.825Z\",\r\n                description: \"Premium Surf Board\",\r\n                images: [\r\n                         {\r\n                      contentType: \"image/jpg\",\r\n                      advertismentId: \"dummy-client-id1\",\r\n                      href: \"https://raw.github.com/ewernqvi/mvc_rest_demo/master/server/test-data/img/surfboard.jpg\"\r\n                         }\r\n                         ],\r\n                owner: \"mrx@gmail.com\",\r\n                price: \"$110\"\r\n                },\r\n                {\r\n                _id: \"dummy-client-id2\",\r\n                category: \"Hobbies\",\r\n                created: \"2014-02-11T09:27:34.825Z\",\r\n                description: \"Premium Long Board\",\r\n                images: [\r\n                         {\r\n                     contentType: \"image/jpg\",\r\n                      advertismentId: \"dummy-client-idr2\",\r\n                      href: \"https://raw.github.com/ewernqvi/mvc_rest_demo/master/server/test-data/img/longboard.jpg\"\r\n                         }\r\n                         ],\r\n                owner: \"mrx@gmail.com\",\r\n                price: \"$220\"\r\n                },\r\n                {\r\n                _id: \"dummy-client-id3\",\r\n                category: \"Hobbies\",\r\n                created: \"2014-02-10T09:27:34.825Z\",\r\n                description: \"Dr Zoggs Sex Wax\",\r\n                images: [\r\n                         {\r\n                         contentType: \"image/jpg\",\r\n                         advertismentId: \"dummy-client-id3\",\r\n                         href: \"https://raw.github.com/ewernqvi/mvc_rest_demo/master/server/test-data/img/zoggs.jpg\"\r\n                         }\r\n                         ],\r\n                owner: \"mrx@gmail.com\",\r\n                price: \"$11\"\r\n                }\r\n                ];\r\n  }\r\n  return{\r\n    get: function(adId){\r\n      var deferred = $q.defer();\r\n      var res=null;\r\n      // Dummy implementation for now, we shall call the server\r\n      var l=list();\r\n      for(var i=0; i < l.length; i++){\r\n        if(l[i]._id === adId){\r\n          res = l[i];\r\n          break;\r\n        }\r\n      }\r\n      if(res)\r\n        deferred.resolve(res); \r\n      else \r\n        deferred.reject('Advertisment with id: ' + adId + ' not found!'); \r\n      \r\n      return deferred.promise;\r\n      \r\n    },\r\n    list: list\r\n  }\r\n}\r\n}); \r\n```\r\njs/services.js\r\n\r\nNow we have created a working detail page, and all the tests run it's time to communicate with our back-end server\r\n\r\n### Hooking up Angular JS with the REST backend\r\nOur get service is well prepared for backend communication, since we implemented it using a promise it is now just a matter of \r\n\r\nBut before we begin, let's check out the latest code\r\n```\r\ngit checkout -f client-angular4\r\n```\r\nLets start to modify the list service, it will return a promise, since $http does so by default. This means we have to make some small adjustments in the controller following the same pattern as we did for the AdvertismentsDetailCtrl\r\n\r\n```javascript\r\n// the $http API is based on the deferred/promise APIs exposed by the $q service\r\n// so it returns a promise for us by default\r\nreturn $http.get('/api/advertisments')\r\n  .then(function(response) {\r\n    if (typeof response.data === 'object') {\r\n      return response.data;\r\n    } else {\r\n      // invalid response\r\n      return $q.reject(response.data);\r\n    }\r\n  }, function(err) {\r\n      // something went wrong\r\n      return $q.reject(err.data);\r\n});\r\n```\r\napp/services.js\r\n\r\nThe little modification in the controller\r\n```javascript\r\n buyAndSellApp.controller('AdvertismentsCtrl',['$scope', 'advertisment',\r\n                                               function($scope, advertisment) {\r\n        advertisment.list().then(function(result){\r\n          $scope.advertisments=result\r\n        }, function(err){console.log('error: '+ err);});\r\n        $scope.formatDate = formatDate;\r\n  }]);\r\n```\r\nNow we shall be able to see advertisements from the server, that is if we loaded some using CURL earlier. If we click and advertisment loading details will fail now, since we call the list service, which is a promise now, so let's adjust the advertisment.get method so it communicates with the backend.\r\n\r\n```javascript\r\n  return{\r\n    get: function(adId){\r\n     return $http.get('/api/advertisments/' + adId).then(function(response) {\r\n      if (typeof response.data === 'object') {\r\n        return response.data;\r\n      }else{\r\n        // invalid response\r\n        return $q.reject(response.data);\r\n      }\r\n    }, function(err) {\r\n      // something went wrong\r\n      return $q.reject(err.data);\r\n    });\r\n      \r\n    },\r\n    list: list\r\n  }\r\n```\r\napp/services.js\r\n\r\nWe know have an application that works as expected. We could add some more end-2-end tests, but I will leave that as an exercise for you.\r\n\r\n### Logging In\r\n\r\nCreate a new login partial, set a variable in the root scope or local storage holding the user-token\r\n\r\n```HTML\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n  <div ng-hide=\"login.user\" class=\"col-md-6\">\r\n    <form action=\"\" ng-submit=\"login.connect()\">\r\n      <fieldset>\r\n        <legend>Login</legend>\r\n        <p><input ng-model=\"login.login\" name=\"email\" type=\"text\" placeholder=\"Login\" required /></p>\r\n        <p><input ng-model=\"login.password\" name=\"password\" type=\"password\" placeholder=\"Password\" required /></p>\r\n        <p><button type=\"submit\">Login</button></p>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n  <div ng-hide=\"login.user\" div class=\"col-md-6\">\r\n      <form action=\"\" ng-submit=\"login.register()\">\r\n      <fieldset>\r\n        <legend>Register new User</legend>\r\n        <p><input ng-model=\"login.new.user\" name=\"email\" type=\"text\" placeholder=\"your email\" required /></p>\r\n        <p><input ng-model=\"login.new.password\" name=\"password\" type=\"password\" placeholder=\"Password\" required /></p>\r\n        <p><button type=\"submit\">Register</button></p>\r\n      </fieldset>\r\n    </form>\r\n  </div>\r\n  \r\n  </div>\r\n\r\n  <div ng-show=\"login.user\">\r\n    <p>Welcome, {{login.user._id}} : token {{login.user.userToken}}!</p>\r\n    <p><button ng-click=\"login.disconnect()\">Logout</button></p>\r\n  </div>\r\n</div>\r\n```\r\npartials/login.html\r\n\r\nNothing fancy here, just a simple form divided into a login section and a register new user section.\r\nSubmitting the form will trigger a controller and if successful login the user will be transferred\r\nback to the advertisements overview. When an existing user has checked in, the loaded list of \r\nadvertisements are checked against the owner-id, if one matches the data is re-loaded.\r\n\r\n```javascript\r\n'use strict';\r\n\r\n// Declare app level module which depends on filters, and services\r\nangular.module('buyAndSellApp', [\r\n  'ngRoute',\r\n  'buyAndSellApp.filters',\r\n  'buyAndSellApp.services',\r\n  'buyAndSellApp.directives',\r\n  'buyAndSellApp.controllers'\r\n]).\r\nconfig(['$routeProvider', function($routeProvider) {\r\n  $routeProvider.when('/view1', {templateUrl: 'partials/partial1.html', controller: 'MyCtrl1'});\r\n  $routeProvider.when('/view2', {templateUrl: 'partials/partial2.html', controller: 'MyCtrl2'});\r\n  $routeProvider.when('/loginRegister', {templateUrl: 'partials/login.html', controller: 'LoginController'});\r\n  $routeProvider.when('/advertisment/:id', {templateUrl: 'partials/advertismentDetails.html',\r\n      controller: 'AdvertismentDetailCtrl'});\r\n  $routeProvider.when('/advertisments', {templateUrl: 'partials/advertisments.html', \r\n      controller: 'AdvertismentsCtrl'});\r\n  // Default route\r\n\r\n  $routeProvider.otherwise({redirectTo: '/advertisments'});\r\n}]);\r\n```\r\njs/app.js\r\n\r\nHere we just add the routing logic, the route is triggered by the login button on the index.html page.\r\n\r\n```javascript\r\n buyAndSellApp.controller('LoginController', ['$scope', 'user',\r\n     function($scope, user){\r\n        $scope.login = {};\r\n        $scope.login.user = null;\r\n         \r\n        $scope.login.connect = function() {\r\n          user.connect($scope.login.login, $scope.login.password, function(res){\r\n            if(res.error) alert(err);\r\n            $scope.login.user = res;\r\n          });\r\n        }\r\n         \r\n        $scope.login.register = function() {\r\n          var newUser = {email: $scope.login.new.user,\r\n                         password: $scope.login.new.password};\r\n          user.register(newUser, function(res) {\r\n            if(res.error) alert(err);\r\n            $scope.login.user = res;\r\n          });\r\n         };\r\n    \r\n         $scope.login.disconnect = function() {\r\n           $scope.login.user = null;\r\n           user.logout();\r\n         };\r\n     }]);\r\n```\r\njs/controllers.js\r\n\r\nWhen adding the controller logic, we realize that we need a login service to communicate with the \r\nuser-resource on the server-side. We can mock this service in our test to make it work without depending\r\non the backend.\r\n\r\n```javascript\r\n $provide.factory('user', ['$http', function(httpSvc){return new user(httpSvc);}]);  \r\n\r\nfunction user($http){\r\n  var _user={};\r\n  var connFn = function(username, password, res){\r\n      function utf8_to_b64( str ) {return window.btoa(unescape(encodeURIComponent( str )));}\r\n      $http.defaults.headers.common['Authorization'] = 'Basic ' + utf8_to_b64(username + ':' + password);\r\n      $http.get('/api/users/'+ username).success(function(data, status) {\r\n            if (status < 200 || status >= 300)\r\n                return;\r\n            _user = data;\r\n            $http.defaults.headers.common['user-token'] = _user.userToken;\r\n            res(_user);\r\n        }).error(function(err, status, headers, config) {\r\n          if(status == 418){\r\n            res( {error: err});\r\n          }\r\n        });\r\n        delete $http.defaults.headers.common.Authorization;\r\n        \r\n  };\r\n  return{\r\n    register: function(newUser, res) {\r\n        $http.post('/api/users/', newUser).success(function(data, status) {\r\n            _user = data[0];\r\n            // Now we have to call get, to get our token\r\n            connFn(_user.email, _user.password, res);\r\n        }).error(function(err, status, headers, config) {\r\n            return {error: err};\r\n        });\r\n    },\r\n    connect: connFn,\r\n    logout: function(){\r\n      delete $http.defaults.headers.common['user-token'];\r\n    }\r\n  };\r\n}  \r\n```\r\njs/services.js\r\n\r\nWhen we have added our service we shall be able to login, we still have not handled login-errors\r\nand registration errors in a good way, we leave this as an exercise for you!.\r\n\r\n## Client Summary\r\nWe have now completed part of our application, now it's just a matter of applying the same technique\r\nto finish the reminder of the application or start a new project of your own.\r\n# Extras \r\n## Server\r\nModify the server to support CORS, this is rather simple just follow the linked \r\n[instructions](https://npmjs.org/package/cors)\r\n\r\nMake sure you configures the Access-Control-Allow-Headers CORS property to allow our user-token header.\r\n\r\nModify the port of the  server and start an additional instance, let the first server serve your \r\nHTML-pages this way the REST-API is on a different domain from a web-browser perspective.\r\n\r\ne.g. access the client on http://localhost:3333/app\r\n\r\nand the server-rest-api on http://localhost:3000/api/advertisments\r\n\r\n## Client\r\n### Adding Images in Angular JS\r\nAdding an image to an advertisement is not that hard if we post a form, but in our single page application\r\nwe do not want to do this, so instead we must rely on posting FormData in our advertisement service.\r\n\r\nsee [Simple Example](http://jsfiddle.net/JeJenny/ZG9re/)\r\n\r\nThere are many more advanced plugins available for Angular if you prefer drag and drop, preview etc.\r\n\r\n### Adding new Advertisements\r\nIf the user is logged in, just:\r\n\r\n1. Add a link at button of the page to trigger this route \r\n2. Update js/app.js with the new route and a controller\r\n3. Add a test and the new controller\r\n4. Add an addAdvertisement.html partial where you display the information in a form, use what you learned\r\n   in the [Adding Images in Angular JS](#Adding Images in Angular JS) to enable adding images, \r\n   removing an image is just a matter of calling the DELETE method on the image resource. Note that\r\n   you must add a placeholder advertisement to be able to add an image.\r\n5. Add methods in our advertisement service to communicate with\r\n   * POST /api/images - Add image\r\n   * POST /api/advertisments - Add an advertisement\r\n\r\nGood Luck!\r\n\r\n### Edit Advertisement Text\r\nIf the user is logged in, just:\r\n\r\n1. Add an edit icon on the left of an advertisement with an edit link\r\n2. Clicking on the icon shall trigger the edit route\r\n3. Update js/app.js with the new route and a controller\r\n4. Add a test and the new controller\r\n5. Add a editAdvertisement.html partial where you display the information in a form\r\n   Removing an image is just a matter of calling the DELETE method on the image resource.\r\n6. Add methods in our advertisement service to communicate with\r\n   * DELETE /api/images:id - Remove an image\r\n   * PUT /api/advertisments - Update the text of the advertisement\r\n\r\nGood Luck!\r\n### Removing Advertisements from the Client\r\nAdd a wast-bin right of the advertisement, if a delete link exist for the advertisement. When clicked\r\nuse the verb and href provided in the link to perform a delete on the server-side.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}