var express = require('express')
, mongoskin = require('mongoskin');


function getClientIP(req){
	var ip = req.headers['x-forwarded-for'] || 
		req.connection.remoteAddress || 
		req.socket.remoteAddress ||
		req.connection.socket.remoteAddress;
	console.log(ip);
	return ip;
}

var app = express();

// Authenticator
var auth = express.basicAuth(function(user, pass, callback) {
		var user_db = db.collection('users');
		user_db.findOne({_id: user}, function(e, result){
			if (e) return next(e);
			var authenticated = ( result && result.password && pass === result.password);
			callback(null /* error */, authenticated);
			});
		});


//app.use(express.bodyParser());

app.use(express.json());
app.use(express.urlencoded());

var db = mongoskin.db('localhost:27017/test_db2', {safe:true});;

app.param('collectionName', function(req, res, next, collectionName){
		req.collection = db.collection(collectionName);
		return next();
		});

/*
   app.get('/', function(req, res) {
   res.send('please select a collection, e.g., /collections/messages');
   });
 */

function handleLogin(req, res){
	req.collection = db.collection('users');
	console.log('trying to login: '+ req.path+ ' ' + req.params.id);
	var id = req.collection.id(req.params.id);
	req.collection.findOne({_id: id}, function(e, result){
			if (e) return next(e);
			result.userToken = '12344ever@rtet34'; // This value shall be generated by a proper server, and
			// checked against the client ip, valid etc..
			console.log('apa33: '+ JSON.stringify(result));
			//console.log('mongo: ' + result[0]._id);
			res.send(result);
			});
}

function accessDenied(req, res){
  res.send(406, '{error: "Access Denied"}');
}

function handleResult(req, res){
                var filter=null;
		if(req.query.filter) filter=JSON.parse(req.query.filter);
		req.collection.find({},{limit:10, sort: [['_id',-1]]}).toArray(function(e, results){
			if (e) return next(e);
                        if(filter){
                          var resx=[];
                          resx.push(results[0]);
                          console.log('TODO: FixME!!!');
                          res.send(resx);
                        }else{
			  res.send(results);
                        }
			});

}

// This route is used to authenticate a user, it is protected with basic auth and returns a user object
// including a user_token that can be used for upcoming actions
app.get('/api/users/:id', auth, handleLogin);
app.get('/api/users', accessDenied);

app.get('/api/:collectionName', handleResult);

app.post('/api/:collectionName', function(req, res) {
		req.collection.insert(req.body, {}, function(e, results){
			if (e) { res.send(JSON.stringify(e));}else{
			res.send(results);
			}
			});
		});


app.get('/api/:collectionName/:id', function(req, res) {
		console.log('access api with: ' + req.path);
		req.collection.findOne({_id: req.collection.id(req.params.id)}, function(e, result){
			if (e) return next(e);
			res.send(result);
			});
		});


app.put('/api/:collectionName/:id', function(req, res) {
		if(!req.headers['user-token']){
		res.send(406,{msg: 'error: user-token must be set in http header to perform an update'});
		return;
		}
		// In a real server we should offcourse check that the userToken is valid
		delete req.body._id; // In order to update the record, the _id field may not exist in mongo
		req.collection.update({_id: req.collection.id(req.params.id)}, {$set:req.body}, {safe:true, multi:false}, function(e, result){
			if (e) res.send(500, e);
			else{
			res.send( (result===1)?{msg:'success'}:{msg:'error'});
			} 
			});
		});




app.del('/api/:collectionName/:id', function(req, res) {
		if(!req.headers['user-token']){
		res.send(406,{msg: 'error: user-token must be set in http header to perform an update'});
		return;
		}
		// In a real server we should offcourse check that the userToken is valid
		req.collection.remove({_id: req.collection.id(req.params.id)}, function(e, result){
			if (e) return next(e);
			res.send((result===1)?{msg:'success'}:{msg:'error'});
			});
		});



app.configure(function(){
		app.use(express.static(__dirname + '/public'));
		/*
		   app.use(function(err, req, res, next){
		   console.error(err.stack);
		   res.send(500, 'Something broke!');
		   });
		 */
		});


console.log('go to http://localhost:3000/api/advertisments');
app.listen(3000);
